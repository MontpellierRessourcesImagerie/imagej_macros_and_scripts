import bpy
from mathutils import Vector
import sys
import os
import json
import random


fire_lut = [(0.0, 0.0, 0.0, 1.0), (0.0, 0.0, 0.027450980392156862, 1.0), (0.0, 0.0, 0.058823529411764705, 1.0), (0.0, 0.0, 0.08627450980392157, 1.0), (0.0, 0.0, 0.11764705882352941, 1.0), (0.0, 0.0, 0.14901960784313725, 1.0), (0.0, 0.0, 0.17647058823529413, 1.0), (0.0, 0.0, 0.20784313725490197, 1.0), (0.0, 0.0, 0.23921568627450981, 1.0), (0.0, 0.0, 0.2549019607843137, 1.0), (0.0, 0.0, 0.27058823529411763, 1.0), (0.0, 0.0, 0.2901960784313726, 1.0), (0.0, 0.0, 0.3058823529411765, 1.0), (0.0, 0.0, 0.3215686274509804, 1.0), (0.0, 0.0, 0.3411764705882353, 1.0), (0.0, 0.0, 0.3568627450980392, 1.0), (0.00392156862745098, 0.0, 0.3764705882352941, 1.0), (0.01568627450980392, 0.0, 0.39215686274509803, 1.0), (0.027450980392156862, 0.0, 0.40784313725490196, 1.0), (0.0392156862745098, 0.0, 0.4235294117647059, 1.0), (0.050980392156862744, 0.0, 0.44313725490196076, 1.0), (0.06274509803921569, 0.0, 0.4588235294117647, 1.0), (0.07450980392156863, 0.0, 0.4745098039215686, 1.0), (0.08627450980392157, 0.0, 0.49019607843137253, 1.0), (0.09803921568627451, 0.0, 0.5098039215686274, 1.0), (0.10980392156862745, 0.0, 0.5254901960784314, 1.0), (0.12156862745098039, 0.0, 0.5411764705882353, 1.0), (0.13333333333333333, 0.0, 0.5607843137254902, 1.0), (0.1450980392156863, 0.0, 0.5764705882352941, 1.0), (0.1568627450980392, 0.0, 0.592156862745098, 1.0), (0.16862745098039217, 0.0, 0.611764705882353, 1.0), (0.1803921568627451, 0.0, 0.6274509803921569, 1.0), (0.19215686274509805, 0.0, 0.6470588235294118, 1.0), (0.20392156862745098, 0.0, 0.6588235294117647, 1.0), (0.21568627450980393, 0.0, 0.6705882352941176, 1.0), (0.22745098039215686, 0.0, 0.6862745098039216, 1.0), (0.23921568627450981, 0.0, 0.6980392156862745, 1.0), (0.25098039215686274, 0.0, 0.7098039215686275, 1.0), (0.2627450980392157, 0.0, 0.7254901960784313, 1.0), (0.27450980392156865, 0.0, 0.7372549019607844, 1.0), (0.28627450980392155, 0.0, 0.7529411764705882, 1.0), (0.2980392156862745, 0.0, 0.7647058823529411, 1.0), (0.30980392156862746, 0.0, 0.7803921568627451, 1.0), (0.3215686274509804, 0.0, 0.792156862745098, 1.0), (0.3333333333333333, 0.0, 0.807843137254902, 1.0), (0.34509803921568627, 0.0, 0.8196078431372549, 1.0), (0.3568627450980392, 0.0, 0.8352941176470589, 1.0), (0.3686274509803922, 0.0, 0.8470588235294118, 1.0), (0.3843137254901961, 0.0, 0.8627450980392157, 1.0), (0.396078431372549, 0.0, 0.8627450980392157, 1.0), (0.40784313725490196, 0.0, 0.8666666666666667, 1.0), (0.4196078431372549, 0.0, 0.8705882352941177, 1.0), (0.43137254901960786, 0.0, 0.8745098039215686, 1.0), (0.44313725490196076, 0.0, 0.8784313725490196, 1.0), (0.4549019607843137, 0.0, 0.8823529411764706, 1.0), (0.4666666666666667, 0.0, 0.8862745098039215, 1.0), (0.47843137254901963, 0.0, 0.8901960784313725, 1.0), (0.49019607843137253, 0.0, 0.8784313725490196, 1.0), (0.5019607843137255, 0.0, 0.8705882352941177, 1.0), (0.5137254901960784, 0.0, 0.8627450980392157, 1.0), (0.5254901960784314, 0.0, 0.8549019607843137, 1.0), (0.5372549019607843, 0.0, 0.8470588235294118, 1.0), (0.5490196078431373, 0.0, 0.8392156862745098, 1.0), (0.5607843137254902, 0.0, 0.8313725490196079, 1.0), (0.5725490196078431, 0.0, 0.8235294117647058, 1.0), (0.5803921568627451, 0.0, 0.807843137254902, 1.0), (0.5882352941176471, 0.0, 0.792156862745098, 1.0), (0.596078431372549, 0.0, 0.7803921568627451, 1.0), (0.6039215686274509, 0.0, 0.7647058823529411, 1.0), (0.611764705882353, 0.0, 0.7490196078431373, 1.0), (0.6196078431372549, 0.0, 0.7372549019607844, 1.0), (0.6274509803921569, 0.0, 0.7215686274509804, 1.0), (0.6352941176470588, 0.0, 0.7098039215686275, 1.0), (0.6392156862745098, 0.0, 0.6941176470588235, 1.0), (0.6431372549019608, 0.0, 0.6784313725490196, 1.0), (0.6509803921568628, 0.0, 0.6627450980392157, 1.0), (0.6549019607843137, 0.0, 0.6509803921568628, 1.0), (0.6588235294117647, 0.0, 0.6352941176470588, 1.0), (0.6666666666666666, 0.0, 0.6196078431372549, 1.0), (0.6705882352941176, 0.0, 0.6039215686274509, 1.0), (0.6784313725490196, 0.0, 0.592156862745098, 1.0), (0.6823529411764706, 0.0, 0.5764705882352941, 1.0), (0.6862745098039216, 0.0, 0.5607843137254902, 1.0), (0.6941176470588235, 0.0, 0.5490196078431373, 1.0), (0.6980392156862745, 0.0, 0.5333333333333333, 1.0), (0.7019607843137254, 0.0, 0.5176470588235295, 1.0), (0.7098039215686275, 0.0, 0.5058823529411764, 1.0), (0.7137254901960784, 0.0, 0.49019607843137253, 1.0), (0.7215686274509804, 0.0, 0.47843137254901963, 1.0), (0.7254901960784313, 0.0, 0.4627450980392157, 1.0), (0.7294117647058823, 0.0, 0.4470588235294118, 1.0), (0.7372549019607844, 0.0, 0.43529411764705883, 1.0), (0.7411764705882353, 0.0, 0.4196078431372549, 1.0), (0.7450980392156863, 0.0, 0.403921568627451, 1.0), (0.7529411764705882, 0.0, 0.39215686274509803, 1.0), (0.7568627450980392, 0.0, 0.3764705882352941, 1.0), (0.7647058823529411, 0.0, 0.36470588235294116, 1.0), (0.7686274509803922, 0.00392156862745098, 0.34901960784313724, 1.0), (0.7764705882352941, 0.011764705882352941, 0.3333333333333333, 1.0), (0.7803921568627451, 0.0196078431372549, 0.3215686274509804, 1.0), (0.788235294117647, 0.027450980392156862, 0.3058823529411765, 1.0), (0.792156862745098, 0.03137254901960784, 0.2901960784313726, 1.0), (0.8, 0.0392156862745098, 0.2784313725490196, 1.0), (0.803921568627451, 0.047058823529411764, 0.2627450980392157, 1.0), (0.8117647058823529, 0.054901960784313725, 0.25098039215686274, 1.0), (0.8156862745098039, 0.06274509803921569, 0.23529411764705882, 1.0), (0.8196078431372549, 0.07450980392156863, 0.2196078431372549, 1.0), (0.8235294117647058, 0.08235294117647059, 0.20784313725490197, 1.0), (0.8313725490196079, 0.09411764705882353, 0.19215686274509805, 1.0), (0.8352941176470589, 0.10588235294117647, 0.17647058823529413, 1.0), (0.8392156862745098, 0.11372549019607843, 0.16470588235294117, 1.0), (0.8431372549019608, 0.12549019607843137, 0.14901960784313725, 1.0), (0.8509803921568627, 0.13725490196078433, 0.13725490196078433, 1.0), (0.8549019607843137, 0.1450980392156863, 0.12156862745098039, 1.0), (0.8627450980392157, 0.1568627450980392, 0.10588235294117647, 1.0), (0.8666666666666667, 0.16862745098039217, 0.09019607843137255, 1.0), (0.8745098039215686, 0.1803921568627451, 0.0784313725490196, 1.0), (0.8784313725490196, 0.18823529411764706, 0.06274509803921569, 1.0), (0.8862745098039215, 0.2, 0.047058823529411764, 1.0), (0.8901960784313725, 0.21176470588235294, 0.03137254901960784, 1.0), (0.8980392156862745, 0.2235294117647059, 0.0196078431372549, 1.0), (0.9019607843137255, 0.23137254901960785, 0.01568627450980392, 1.0), (0.9058823529411765, 0.24313725490196078, 0.011764705882352941, 1.0), (0.9137254901960784, 0.2549019607843137, 0.011764705882352941, 1.0), (0.9176470588235294, 0.26666666666666666, 0.00784313725490196, 1.0), (0.9215686274509803, 0.27450980392156865, 0.00392156862745098, 1.0), (0.9294117647058824, 0.28627450980392155, 0.00392156862745098, 1.0), (0.9333333333333333, 0.2980392156862745, 0.0, 1.0), (0.9411764705882353, 0.30980392156862746, 0.0, 1.0), (0.9450980392156862, 0.3176470588235294, 0.0, 1.0), (0.9529411764705882, 0.32941176470588235, 0.0, 1.0), (0.9568627450980393, 0.3411764705882353, 0.0, 1.0), (0.9647058823529412, 0.35294117647058826, 0.0, 1.0), (0.9686274509803922, 0.3607843137254902, 0.0, 1.0), (0.9764705882352941, 0.37254901960784315, 0.0, 1.0), (0.9803921568627451, 0.3843137254901961, 0.0, 1.0), (0.9882352941176471, 0.396078431372549, 0.0, 1.0), (0.9882352941176471, 0.403921568627451, 0.0, 1.0), (0.9882352941176471, 0.4117647058823529, 0.0, 1.0), (0.9921568627450981, 0.4196078431372549, 0.0, 1.0), (0.9921568627450981, 0.42745098039215684, 0.0, 1.0), (0.9921568627450981, 0.43529411764705883, 0.0, 1.0), (0.996078431372549, 0.44313725490196076, 0.0, 1.0), (0.996078431372549, 0.45098039215686275, 0.0, 1.0), (1.0, 0.4588235294117647, 0.0, 1.0), (1.0, 0.4666666666666667, 0.0, 1.0), (1.0, 0.4745098039215686, 0.0, 1.0), (1.0, 0.4823529411764706, 0.0, 1.0), (1.0, 0.49019607843137253, 0.0, 1.0), (1.0, 0.4980392156862745, 0.0, 1.0), (1.0, 0.5058823529411764, 0.0, 1.0), (1.0, 0.5137254901960784, 0.0, 1.0), (1.0, 0.5215686274509804, 0.0, 1.0), (1.0, 0.5254901960784314, 0.0, 1.0), (1.0, 0.5333333333333333, 0.0, 1.0), (1.0, 0.5411764705882353, 0.0, 1.0), (1.0, 0.5490196078431373, 0.0, 1.0), (1.0, 0.5529411764705883, 0.0, 1.0), (1.0, 0.5607843137254902, 0.0, 1.0), (1.0, 0.5686274509803921, 0.0, 1.0), (1.0, 0.5764705882352941, 0.0, 1.0), (1.0, 0.5803921568627451, 0.0, 1.0), (1.0, 0.5882352941176471, 0.0, 1.0), (1.0, 0.596078431372549, 0.0, 1.0), (1.0, 0.6039215686274509, 0.0, 1.0), (1.0, 0.6078431372549019, 0.0, 1.0), (1.0, 0.615686274509804, 0.0, 1.0), (1.0, 0.6235294117647059, 0.0, 1.0), (1.0, 0.6313725490196078, 0.0, 1.0), (1.0, 0.6352941176470588, 0.0, 1.0), (1.0, 0.6431372549019608, 0.0, 1.0), (1.0, 0.6509803921568628, 0.0, 1.0), (1.0, 0.6588235294117647, 0.0, 1.0), (1.0, 0.6627450980392157, 0.0, 1.0), (1.0, 0.6705882352941176, 0.0, 1.0), (1.0, 0.6784313725490196, 0.0, 1.0), (1.0, 0.6862745098039216, 0.0, 1.0), (1.0, 0.6901960784313725, 0.0, 1.0), (1.0, 0.6980392156862745, 0.0, 1.0), (1.0, 0.7058823529411765, 0.0, 1.0), (1.0, 0.7137254901960784, 0.0, 1.0), (1.0, 0.7215686274509804, 0.0, 1.0), (1.0, 0.7294117647058823, 0.0, 1.0), (1.0, 0.7372549019607844, 0.0, 1.0), (1.0, 0.7450980392156863, 0.0, 1.0), (1.0, 0.7490196078431373, 0.0, 1.0), (1.0, 0.7568627450980392, 0.0, 1.0), (1.0, 0.7647058823529411, 0.0, 1.0), (1.0, 0.7725490196078432, 0.0, 1.0), (1.0, 0.7803921568627451, 0.0, 1.0), (1.0, 0.788235294117647, 0.0, 1.0), (1.0, 0.796078431372549, 0.0, 1.0), (1.0, 0.803921568627451, 0.0, 1.0), (1.0, 0.807843137254902, 0.0, 1.0), (1.0, 0.8156862745098039, 0.0, 1.0), (1.0, 0.8235294117647058, 0.0, 1.0), (1.0, 0.8313725490196079, 0.0, 1.0), (1.0, 0.8352941176470589, 0.0, 1.0), (1.0, 0.8431372549019608, 0.0, 1.0), (1.0, 0.8509803921568627, 0.0, 1.0), (1.0, 0.8588235294117647, 0.0, 1.0), (1.0, 0.8627450980392157, 0.0, 1.0), (1.0, 0.8705882352941177, 0.0, 1.0), (1.0, 0.8784313725490196, 0.0, 1.0), (1.0, 0.8862745098039215, 0.0, 1.0), (1.0, 0.8941176470588236, 0.0, 1.0), (1.0, 0.9019607843137255, 0.0, 1.0), (1.0, 0.9098039215686274, 0.0, 1.0), (1.0, 0.9176470588235294, 0.0, 1.0), (1.0, 0.9215686274509803, 0.01568627450980392, 1.0), (1.0, 0.9294117647058824, 0.03137254901960784, 1.0), (1.0, 0.9372549019607843, 0.050980392156862744, 1.0), (1.0, 0.9450980392156862, 0.06666666666666667, 1.0), (1.0, 0.9490196078431372, 0.08235294117647059, 1.0), (1.0, 0.9568627450980393, 0.10196078431372549, 1.0), (1.0, 0.9647058823529412, 0.11764705882352941, 1.0), (1.0, 0.9725490196078431, 0.13725490196078433, 1.0), (1.0, 0.9725490196078431, 0.16470588235294117, 1.0), (1.0, 0.9764705882352941, 0.19607843137254902, 1.0), (1.0, 0.9803921568627451, 0.22745098039215686, 1.0), (1.0, 0.984313725490196, 0.25882352941176473, 1.0), (1.0, 0.9882352941176471, 0.2901960784313726, 1.0), (1.0, 0.9921568627450981, 0.3215686274509804, 1.0), (1.0, 0.996078431372549, 0.35294117647058826, 1.0), (1.0, 1.0, 0.3843137254901961, 1.0), (1.0, 1.0, 0.4117647058823529, 1.0), (1.0, 1.0, 0.44313725490196076, 1.0), (1.0, 1.0, 0.4745098039215686, 1.0), (1.0, 1.0, 0.5058823529411764, 1.0), (1.0, 1.0, 0.5333333333333333, 1.0), (1.0, 1.0, 0.5647058823529412, 1.0), (1.0, 1.0, 0.596078431372549, 1.0), (1.0, 1.0, 0.6274509803921569, 1.0), (1.0, 1.0, 0.6549019607843137, 1.0), (1.0, 1.0, 0.6862745098039216, 1.0), (1.0, 1.0, 0.7176470588235294, 1.0), (1.0, 1.0, 0.7490196078431373, 1.0), (1.0, 1.0, 0.7803921568627451, 1.0), (1.0, 1.0, 0.8117647058823529, 1.0), (1.0, 1.0, 0.8431372549019608, 1.0), (1.0, 1.0, 0.8745098039215686, 1.0), (1.0, 1.0, 0.8901960784313725, 1.0), (1.0, 1.0, 0.9058823529411765, 1.0), (1.0, 1.0, 0.9215686274509803, 1.0), (1.0, 1.0, 0.9372549019607843, 1.0), (1.0, 1.0, 0.9529411764705882, 1.0), (1.0, 1.0, 0.9686274509803922, 1.0), (1.0, 1.0, 0.984313725490196, 1.0), (1.0, 1.0, 1.0, 1.0), (1.0, 1.0, 1.0, 1.0), (1.0, 1.0, 1.0, 1.0), (1.0, 1.0, 1.0, 1.0), (1.0, 1.0, 1.0, 1.0), (1.0, 1.0, 1.0, 1.0), (1.0, 1.0, 1.0, 1.0), (1.0, 1.0, 1.0, 1.0)]

def main():

    # = = = = Getting the state from the command line arguments (JSON) = = = = 
    state = json.loads(sys.argv[5].replace('#', '"'))
    mainCollection = bpy.context.scene.collection
    bpy.data.collections.remove(mainCollection.children[0])

    # = = = = Creating materials assigned to each object = = = =

    # 1. Surface material

    surfaceMaterialName = "surfaceMaterial"
    surfaceMaterial = bpy.data.materials.new(surfaceMaterialName)
    surfaceMaterial.use_nodes = True
    nodes = surfaceMaterial.node_tree.nodes
    links = surfaceMaterial.node_tree.links

    output   = nodes['Material Output']
    diffuse  = nodes.new('ShaderNodeBsdfDiffuse')
    vertexCl = nodes.new('ShaderNodeVertexColor')
    mapRange = nodes.new('ShaderNodeMapRange')
    geometry = nodes.new('ShaderNodeNewGeometry')

    mapRange.inputs[3].default_value = 0.5
    mapRange.inputs[4].default_value = 0.9

    vertexCl.layer_name = 'Col'

    mapRange.clamp = True

    links.new(geometry.outputs[6], mapRange.inputs[0])

    links.new(mapRange.outputs[0], diffuse.inputs[1])

    links.new(vertexCl.outputs[0], diffuse.inputs[0])

    links.new(diffuse.outputs[0], output.inputs[0])

    # 2. Cage material

    cageMaterialName = "cageMaterial"
    cageMaterial = bpy.data.materials.new(cageMaterialName)
    cageMaterial.use_nodes = True
    cageMaterial.blend_method = 'BLEND'
    cageMaterial.shadow_method = 'NONE'
    nodes = cageMaterial.node_tree.nodes
    links = cageMaterial.node_tree.links

    output    = nodes['Material Output']
    wireframe = nodes.new('ShaderNodeWireframe')
    math      = nodes.new('ShaderNodeMath')
    emission = nodes.new('ShaderNodeEmission')
    transp    = nodes.new('ShaderNodeBsdfTransparent')
    mixshader = nodes.new('ShaderNodeMixShader')

    math.operation = 'LESS_THAN'
    math.use_clamp = True
    math.inputs[1].default_value = 0.5
    wireframe.inputs[0].default_value = 0.003

    links.new(wireframe.outputs[0], math.inputs[0])

    links.new(math.outputs[0], mixshader.inputs[0])
    links.new(emission.outputs[0], mixshader.inputs[1])
    links.new(transp.outputs[0], mixshader.inputs[2])

    links.new(mixshader.outputs[0], output.inputs[0])

    # 3. Background material

    bgMaterialName = "bgMaterial"
    bgMaterial = bpy.data.materials.new(bgMaterialName)
    bgMaterial.use_nodes = True
    nodes = bgMaterial.node_tree.nodes
    links = bgMaterial.node_tree.links

    output   = nodes['Material Output']
    emission = nodes.new('ShaderNodeEmission')

    emission.inputs[0].default_value = (0.002, 0.002, 0.002, 1.0)

    links.new(emission.outputs[0], output.inputs[0])

    # = = = = Importing each couple of contact surfaces into separate collections = = = = 

    widest = 0

    if len(state['produced']) == 0:
        print("Nothing produced. Abort.")
        return

    for idx, production in enumerate(state['produced']):

        collection = bpy.data.collections.new(f"contact-{str(idx+1).zfill(2)}")
        mainCollection.children.link(collection)

        center_object = bpy.ops.import_scene.obj(
            filepath=production['center'],
            split_mode='OFF',
            axis_forward='Y',
            axis_up='Z'
        )

        center_ref = bpy.context.selected_objects[0] if center_object == {'FINISHED'} else None

        cleaned_object = bpy.ops.import_scene.obj(
            filepath=production['cleaned'],
            split_mode='OFF',
            axis_forward='Y',
            axis_up='Z'
        )

        cleaned_ref = bpy.context.selected_objects[0] if cleaned_object == {'FINISHED'} else None
        
        if (center_ref is None) or (cleaned_ref is None):
            print("One of the object is None. Abort.")
            return
        
        widest = max(widest, max(center_ref.dimensions))
        center_ref.name = f"Cage-{str(idx+1).zfill(2)}"
        mainCollection.objects.unlink(center_ref)
        collection.objects.link(center_ref)
        center_ref.data.polygons.foreach_set('use_smooth',  [False] * len(center_ref.data.polygons))
        center_ref.display_type = 'WIRE'

        if center_ref.data.materials:
            center_ref.data.materials[0] = cageMaterial
        else:
            center_ref.data.materials.append(cageMaterial)
        
        cleaned_ref.name = f"Surface-{str(idx+1).zfill(2)}"
        mainCollection.objects.unlink(cleaned_ref)
        collection.objects.link(cleaned_ref)
        cleaned_ref.parent = center_ref

        if cleaned_ref.data.materials:
            cleaned_ref.data.materials[0] = surfaceMaterial
        else:
            cleaned_ref.data.materials.append(surfaceMaterial)
        
        # Assigning color depending geodesic distance from border.
        f = open(production['json'], 'r')
        distancesDict = json.load(f)
        f.close()
        distances = distancesDict['geodesic']

        color_layer = cleaned_ref.data.vertex_colors.active or cleaned_ref.data.vertex_colors.new()
        maxDist = max(distances)

        for poly in cleaned_ref.data.polygons:
            for loop_index in range(poly.loop_start, poly.loop_start + poly.loop_total):
                vertexIdx = cleaned_ref.data.loops[loop_index].vertex_index
                nDist = int(255.0 * (float(distances[vertexIdx]) / maxDist))
                newColor = fire_lut[nDist]
                color_layer.data[loop_index].color = newColor

    # Activating the face orientation coloration
    for area in bpy.context.screen.areas:
        if area.type == 'VIEW_3D':
            for space in area.spaces:
                if space.type == 'VIEW_3D':
                    # space.overlay.show_face_orientation = True
                    space.shading.type = 'MATERIAL'
                    break


    # Adding a camera
    extrasCollection = bpy.data.collections.new("Extras")
    mainCollection.children.link(extrasCollection)
    bpy.context.view_layer.layer_collection.children["Extras"].hide_viewport = True
    bpy.context.scene.render.resolution_x = 2000
    bpy.context.scene.render.resolution_y = 2000

    camera_data = bpy.data.cameras.new(name='Camera')
    camera_object = bpy.data.objects.new('Camera', camera_data)
    extrasCollection.objects.link(camera_object)

    direction = Vector((random.random(), random.random(), random.random()))
    direction.normalize()
    camera_object.location = 2 * widest * direction

    constraint = camera_object.constraints.new(type='TRACK_TO')
    tgt = None

    for obj in bpy.data.objects:
        if obj.name.startswith('Cage'):
            tgt = obj
            break

    constraint.target = tgt

    # Adding a background

    bpy.ops.mesh.primitive_ico_sphere_add(
        subdivisions=3,
        radius=4*widest
    )

    sphere = bpy.context.selected_objects[0]

    if sphere.data.materials:
        sphere.data.materials[0] = bgMaterial
    else:
        sphere.data.materials.append(bgMaterial)
    
    extrasCollection.objects.link(sphere)
    mainCollection.objects.unlink(sphere)

    # Adding light sources

    main_light_data = bpy.data.lights.new(name="main_source", type='AREA')
    main_light_data.energy = widest * 1500
    main_light_object = bpy.data.objects.new(name="main_source", object_data=main_light_data)
    extrasCollection.objects.link(main_light_object)
    main_light_object.location = 2 * widest * direction
    main_light_data.size = 8
    main_light_data.color = (1.0, 0.65, 0.55)
    
    constraint = main_light_object.constraints.new(type='TRACK_TO')
    constraint.target = tgt

    # Adding keyframes

    center_ref.rotation_euler = (0.0, 0.0, 0.0)
    center_ref.keyframe_insert(data_path="rotation_euler", frame=1)

    center_ref.rotation_euler = (0.0, 0.0, 6.265731811)
    center_ref.keyframe_insert(data_path="rotation_euler", frame=bpy.context.scene.frame_end)

    # Exporting in a .blend file, aside produced .obj files.
    baseName = os.path.basename(state['current']).split('.')[0]
    outPath = os.path.join(state['outputDirectory'], baseName) + ".blend"
    bpy.ops.wm.save_as_mainfile(filepath=outPath)


main()